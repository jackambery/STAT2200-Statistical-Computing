load("C:/Users/jacka/OneDrive - fairfield.edu/Spring 2024/Statistical Computing/main.RData")
setwd("C:/Users/jacka/OneDrive - fairfield.edu/Spring 2024/Statistical Computing/STAT2200-Statistical-Computing")
setwd("C:/Users/jacka/OneDrive - fairfield.edu/Spring 2024/Statistical Computing/STAT2200-Statistical-Computing")
# Example 1
a <- 5
if (a > 0) {    # think: *if* a > 0, *then* b <- 1
b <- 1
}
if (a > 0) {    # think: *if* a > 0, *then* b <- 1
b <- 1
}
b    # if statement resulted in TRUE, so inner code evaluated
if (a < 0) {
d <- 1
}
d    # if statement resulted in FALSE, so inner code not evaluated
# Example 2
x <- 2
y <- 3
z <- 4
if (x <= y) {
w <- x^2
}
w
if (x >= y) {
w2 <- x^2
}
w2
# Example 3
if (x <= y) {
x <- x^2
}
x    # careful w/ something like this!
# again!
if (x <= y) {
x <- x^2
}
x  # note that x wasn't squared again since condition not satisfied this time
# Example 4
y
z
if (y <= z) w2 <- y^2
w2
# Example 5
myvec <- c(1, 5, 3, 7, 8, 10)
if (any(myvec > 4)) {
myvec2 <- myvec + 2
myvec2    # can have more than one line of code inside of an if statement
}
# Example 6
if (myvec < 6) {
a <- 10
}
a    # first comparison resulted in TRUE, so inner code evaluated
# Example 7
myvec
if (myvec[4] < 8 & myvec[5] > 7) {
a <- myvec[6]^2
}
a  # if statement resulted in TRUE, so inner code evaluated
# Example 8
myvec
if (myvec[4] > 2 & myvec[4] < 6) {
d <- myvec[6]^2
}
d  # if statement resulted in FALSE, so inner code not evaluated
# Example 8
myvec
if (myvec[4] < 5) {    # look at placement/matching of curly braces
a <- 10
} else {
a <- 20
}
a    # condition is FALSE, so if statement code is not run, but else
# Example 9
myvec
if (myvec > 0) {
c <- 5
}
c  # only first element checked... myvec[1] > 0 = TRUE, so c <- 5
if (myvec > 2) {
d <- 5
}
d  # only first element checked... myvec[1] > 2 = FALSE, so inner code not run
if (myvec > 2) {
e <- 5
} else {
e <- 8
}  # still only looking at first element!
e
# Example 10
myvec
# inputs to ifelse(): (1) condition, (2) what happens if condition is true,
#  and (3) what happens if condition is false
ifelse(myvec > 2, 1, 0)
mynewvec <- ifelse(myvec > 2, 1, 0)    # can store the new vector
mynewvec
# Example 11
x <- 5
y <- 3
if (x > y) {   # notice the formatting used
x <- 1
if (x <= 4) {
z <- 50
} else {
z <- 0
}
}
c(x, y, z)
# Example 12
x <- 5
y <- 3
if (x > 2*y) {
x <- 1
if (y >= 4) {
z <- 50
} else {
z <- 0
}
} else {
z <- 25
}
c(x, y, z)
# Example 13
x <- 1
y <- 2
if (x < 4 & y > 3) {
z <- 1
} else if (x >= 4 & y <= 3) {
z <- 2
} else {
z <- 3
}
# Example 15
x <- 5
y <- 10
z <- 8
if (x < y & y < z) {
w <- 1
} else if (x < y & y > z) {
w <- 2
} else if (x > y & y < z) {
w <- 3
} else {
w <- 4
}
w
library(readr)
Cars2020 <- read_csv("datasets/Cars2020.csv")
View(Cars2020)
knitr::opts_chunk$set(echo = TRUE)
Cars2020 <- read_csv("datasets/Cars2020.csv")
Cars2020 <- read_csv("/STAT2200-Statistical-Computing/datasets/Cars2020.csv")
Cars2020 <- read_csv("../datasets/Cars2020.csv")
str(Cars2020)
knitr::opts_chunk$set(echo = TRUE)
Cars2020 <- read_csv("../datasets/Cars2020.csv")
library(readr)
Cars2020 <- read_csv("../datasets/Cars2020.csv")
# str(Cars2020)
library(readr)
Cars2020 <- read_csv("datasets/Cars2020.csv")
View(Cars2020)
# Type
barplot(Cars2020[Type])
# Type
barplot(Cars2020$Type)
# Type
barchart(Cars2020$Type)
# Type
barplot(Cars2020$Type)
# Type
barplot(Cars2020$Type)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
Cars2020 <- read_csv("../datasets/Cars2020.csv")
# str(Cars2020)
# CityMPG
# Drive
# LowPrice
# Type
barplot(Cars2020$Type)
# CityMPG
# Drive
# LowPrice
# Type
type <- Cars2020$Type
barplot(type)
class(type)
head(type)
# Type
barplot(factor(Cars2020$Type))
# Type
barplot(table(Cars2020$Type))
# CityMPG
# Drive
# LowPrice
# Type
types <- table(Cars2020$Type)
barplot(types)
# CityMPG
# Drive
# LowPrice
# Type
types <- table(Cars2020$Type)
barplot(types)
# CityMPG
hist(Cars2020$CityMPG)
# Drive
drives <- table(Cars2020$Drive)
barplot(drives)
# LowPrice
hist(Cars2020$LowPrice)
summary(CityMPG)
summary(Cars2020$CityMPG)
iqr <- 19.0 - 13.25
iqr
summary(Cars2020$CityMPG)
range <- 28 - 10
range
# use na.rm = TRUE -> works w/ basically any function that calculates
#  a statistic
height <- c(60, 70, NA, 66)
# these don't work b/c of the NA
mean(height)
median(height)
sd(height)
quantile(height, 0.1)
# these work now that the NA has been "removed"
#  (really, ignored when calculating)
mean(height, na.rm = TRUE)
median(height, na.rm = TRUE)
sd(height, na.rm = TRUE)
quantile(height, 0.1, na.rm = TRUE)
quantile(Cars2020$CityMPG, 0.05)
quantile(Cars2020$CityMPG, 0.95)
mpgs <- Cars2020$CityMPG
summary(mpgs)
stdev(mpgs)
iqr <- 19.0 - 13.25
iqr
range <- 28 - 10
range
quantile(mpgs, 0.05)
quantile(mpgs, 0.95)
sd(mpgs)
table(types)
anyNA(Cars2020$Type)
table(Cars2020$Type)
table(Cars2020$Type)/nrow(Cars2020)
anyNA(Cars2020$Type) #FALSE
table(Cars2020$Type)
round(table(Cars2020$Type)/nrow(Cars2020), 2)
round(table(Cars2020$Type)/nrow(Cars2020))
table(Cars2020$Type)/nrow(Cars2020)
round((table(Cars2020$Type)/nrow(Cars2020)) * 100), 2)
round((table(Cars2020$Type)/nrow(Cars2020)) * 100), 2))
round((table(Cars2020$Type)/nrow(Cars2020)) * 100)), 2)
round(((table(Cars2020$Type)/nrow(Cars2020)) * 100)), 2)
round(((table(Cars2020$Type)/nrow(Cars2020)) * 100)), 2))
round(((table(Cars2020$Type)/nrow(Cars2020)) * 100), 2)
anyNA(Cars2020$Type) #FALSE
table(Cars2020$Type)
round(((table(Cars2020$Type)/nrow(Cars2020)) * 100), 2) #percentages
library(readr)
Hurricanes2018 <- read_csv("datasets/Hurricanes2018.csv")
View(Hurricanes2018)
library(readr)
Hurricanes2018 <- read_csv("datasets/Hurricanes2018.csv")
Hurricanes2018 <- read_csv("../datasets/Hurricanes2018.csv")
str(Hurricanes2018)
timeplot(Hurricanes2018$Year, Hurricanes2018$Hurricanes)
plot(Hurricanes2018$Year, Hurricanes2018$Hurricanes)
plot(Hurricanes2018$Year, Hurricanes2018$Hurricanes, xlab = "Year", ylab = "Number of Hurricanes")
points(Hurricanes2018$Year, Hurricanes2018$Hurricanes)
plot(Hurricanes2018$Year, Hurricanes2018$Hurricanes, xlab = "Year", ylab = "Number of Hurricanes")
points(Hurricanes2018$Year, Hurricanes2018$Hurricanes)
plot(Hurricanes2018$Year, Hurricanes2018$Hurricanes, xlab = "Year", ylab = "Number of Hurricanes", title = "Hurricanes Each Year")
plot(Hurricanes2018$Year, Hurricanes2018$Hurricanes, xlab = "Year", ylab = "Number of Hurricanes", title("Hurricanes Each Year")
plot(Hurricanes2018$Year, Hurricanes2018$Hurricanes, xlab = "Year", ylab = "Number of Hurricanes", title("Hurricanes Each Year"))
plot(Hurricanes2018$Year, Hurricanes2018$Hurricanes, xlab = "Year", ylab = "Number of Hurricanes", main = "Number of Hurricanes per Year")
lines(Hurricanes2018$Year, Hurricanes2018$Hurricanes)
# CityMPG
hist(Cars2020$CityMPG)
# LowPrice
hist(Cars2020$LowPrice)
# LowPrice
hist(Cars2020$LowPrice, xlab = "Low Prices of Cars", main = "")
# CityMPG
hist(Cars2020$CityMPG, xlab = "CityMPG of Cars", main = "Frequency of City MPGs")
# Drive
drives <- table(Cars2020$Drive, xlab = "Type of Drive", main = "Frequency of Different Types of Drive")
# CityMPG
hist(Cars2020$CityMPG, xlab = "CityMPG of Cars", main = "Frequency of City MPGs")
# Drive
drives <- table(Cars2020$Drive)
barplot(drives, xlab = "Type of Drive", main = "Frequency of Different Types of Drive")
# LowPrice
hist(Cars2020$LowPrice, xlab = "Low Prices of Cars", main = "Frequency of Low Prices")
# Type
types <- table(Cars2020$Type)
barplot(types, xlab = "Type of Car", main = "Frequency of Different Car Types")
