load("C:/Users/jacka/OneDrive - fairfield.edu/Spring 2024/Statistical Computing/main.RData")
setwd("C:/Users/jacka/OneDrive - fairfield.edu/Spring 2024/Statistical Computing")
install.packages("Lahman")
library(Lahman)
View(Salaries)
attach(Salaries)
# 4) Print the first 5 rows of the dataset.
head(5)
# 4) Print the first 5 rows of the dataset.
head(Salaries, n = 5)
# 5) Select the salary variable and print all of the salaries in the dataset.
print(Salaries$salary)
print(Salaries$salary[2000:2500])
# 6) My favorite player was David Ortiz. Print all of his data only. Note that
#    his player ID is: ortizda01
print(Salaries[playerID == 'ortizda01'])
# 6) My favorite player was David Ortiz. Print all of his data only. Note that
#    his player ID is: ortizda01
print(Salaries[Salaries$playerID == 'ortizda01'])
# 6) My favorite player was David Ortiz. Print all of his data only. Note that
#    his player ID is: ortizda01
print(Salaries[Salaries$playerID == 'ortizda01'],)
# 6) My favorite player was David Ortiz. Print all of his data only. Note that
#    his player ID is: ortizda01
print(Salaries[Salaries$playerID == 'ortizda01',])
# 7) Print all of the data for every player who made at least $25 million in a
#    season.
print(Salaries[Salaries$salary >= 25000000 , ])
# 8) Determine how many players have made at least $25 million in a season.
nrow(Salaries[Salaries$salary >= 25000000 , ])
# 9) Print all of the data for every player who made at least $25 million in a
#    season and played for the New York Yankees.
Salaries[Salaries$salary >= 25000000  && Salaries$teamID == 'NYA', ]
# 9) Print all of the data for every player who made at least $25 million in a
#    season and played for the New York Yankees.
Salaries[Salaries$salary >= 25000000  && Salaries$teamID == "NYA", ]
# 9) Print all of the data for every player who made at least $25 million in a
#    season and played for the New York Yankees.
Salaries[(Salaries$salary >= 25000000) && (Salaries$teamID == "NYA"), ]
# 9) Print all of the data for every player who made at least $25 million in a
#    season and played for the New York Yankees.
Salaries[(Salaries$salary >= 25000000) & (Salaries$teamID == "NYA"), ]
# 10) Print all of the data for every player who made either less than one
#     hundred thousand dollars or more than $30 million in a season.
Salaries[Salaries$salary >= 30000000 | Salaries$salary < 100000 , ]
# 2) Determine what type of data structure the dataset is stored in.
str(Salaries)
# 10) Print all of the data for every player who made either less than one
#     hundred thousand dollars or more than $30 million in a season.
Salaries[Salaries$salary >= 30000000 | Salaries$salary < 100000 , ]
nrow(Salaries[Salaries$salary >= 30000000 | Salaries$salary < 100000 , ])
# 10) Print all of the data for every player who made either less than one
#     hundred thousand dollars or more than $30 million in a season.
Salaries[Salaries$salary > 30000000 | Salaries$salary < 100000 , ].getOption("max.print")
# 10) Print all of the data for every player who made either less than one
#     hundred thousand dollars or more than $30 million in a season.
data.frame(Salaries[Salaries$salary > 30000000 | Salaries$salary < 100000 , ])
# 10) Print all of the data for every player who made either less than one
#     hundred thousand dollars or more than $30 million in a season.
pay <- data.frame(Salaries[Salaries$salary > 30000000 | Salaries$salary < 100000 , ])
View(pay)
work <- data.frame(
person = c("Bill", "Joe", "Emma", "Andy", "Diane", "Chris", "Anna"),
age = c(35, 64, 25, 20, 47, 38, 51),
sex = c("M", "M", "F", "M", "F", "M", "F")
)
work2 <- data.frame(
person = c("Zoe", "Tim"),
age = c(29, 40)
)
# can use rbind() to combine df's by row
work
work2
rbind(work, work2)      # error - make sure all variables are the same!
work2_new <- data.frame(
person = c("Zoe", "Tim"),
age = c(29, 40),
sex = c("F", "M")
)
work
work2_new
work_combo <- rbind(work, work2_new)
work_combo
# can use cbind() to combine objects by column
# adding new variable to work_combo here
height <- c(68, 70, 63, 71, 67, 72, 70, 66, 70)
cbind(work_combo, height)    # careful - nothing has been stored!
# can also use $ w/ new variable name to add new variable to df
# this is the way I prefer
work_combo
work_combo$height <- c(68, 70, 63, 71, 67, 72, 70, 66, 70)
work_combo
# can create a new variable from an existing one
work_combo$height_ft <- work_combo$height/12
work_combo
# use data() to view a list of available datasets
data()
setwd("C:/Users/jacka/OneDrive - fairfield.edu/Spring 2024/Statistical Computing")
knitr::opts_chunk$set(echo = TRUE)
lengths <- c(94, 109, 110, 123, 125, 108, 92, 106, 84,
119, 110, 140)
cat(lengths)
cat(lengths[3])
cat(mean(lengths)
cat(mean(lengths))
mean(lengths)
cat(mean(lengths))
cat("Mean movie length (in min):", mean(lengths), " minutes")
cat("Mean movie length (in min):\n", mean(lengths), " minutes")
cat("Mean movie length (in min):\n",mean(lengths), " minutes")
cat("Mean movie length (in min):\n",mean(lengths)," minutes")
paste("\"The mean movie length is",mean(lengths),"minutes\"")
paste("The mean movie length is",mean(lengths),"minutes")
paste("The mean movie length is",mean(lengths),"minutes.")
paste0("The mean movie length is",mean(lengths),"minutes.")
paste0("The mean movie length is ",mean(lengths)," minutes.")
recipies <- data.frame(
type = c("entree", "appetizer", "appetizer", "entree", "entree", "appetizer", "dessert", "dessert", "entree", "entree"),
ingredients = c(8, 4, 5, 10, 6, 8, 7, 15, 10, 9),
prepTime = c(15, 15, 5, 35, 20, 40, 25, 30, 10, 20),
cookTime = c(30, 15, 20, 55, 25, 10, 120, 25, 45, 60),
hasMeat = c("yes", "yes", "yes", "no", "no", "yes", "no", "no", "yes", "yes")
)
View(recipies)
recipies
recipies <- data.frame(
type = c("entree", "appetizer", "appetizer", "entree", "entree", "appetizer", "dessert", "dessert", "entree", "entree"),
ingredients = c(8, 4, 5, 10, 6, 8, 7, 15, 10, 9),
prepTime = c(15, 15, 5, 35, 20, 40, 25, 30, 10, 20),
cookTime = c(30, 15, 20, 55, 25, 10, 120, 25, 45, 60),
hasMeat = c("yes", "yes", "yes", "no", "no", "yes", "no", "no", "yes", "yes")
)
recipies
str(recipies)
recipies
recipies$totalTime <- recipies$prepTime + recipies$cookTime
recipies
recipies2 <- data.frame(
type = c("appetizer", "entree", "dessert", "appetizer"),
ingredients = c(3, 15, 8, 5),
prepTime = c(10, 35, 45, 10),
cookTime = c(0, 90, 150, 20),
hasMeat = c("no", "no", "no", "yes")
)
recipies2
recipies2$totalTime <- recipies2$prepTime + recipies2$cookTime
recipies2
allRecipies <- c(recipies, recipies2)
allRecipies
allRecipies <- c(recipies, recipies2)
View(allRecipies)
allRecipies <- data.frame(recipies, recipies2)
allRecipies <- merge(recipies, recipies2)
View(allRecipies)
allRecipies <- merge(recipies, recipies2)
View(allRecipies)
allRecipies <- merge.data.frame(recipies, recipies2)
View(allRecipies)
c(3, Inf, 218)
# -Inf = negative infinity
-1e500
10/-Inf
-Inf < Inf    # relational operators work w/ Inf and -Inf
5 < Inf
5 > Inf
0/0
Inf/Inf
Inf - Inf
NaN + 1    # NaN is a numeric "value"
knitr::opts_chunk$set(echo = TRUE)
recipies <- data.frame(
type = factor(c("entree", "appetizer", "appetizer", "entree", "entree", "appetizer", "dessert", "dessert", "entree", "entree")),
ingredients = c(8, 4, 5, 10, 6, 8, 7, 15, 10, 9),
prepTime = c(15, 15, 5, 35, 20, 40, 25, 30, 10, 20),
cookTime = c(30, 15, 20, 55, 25, 10, 120, 25, 45, 60),
hasMeat = c("yes", "yes", "yes", "no", "no", "yes", "no", "no", "yes", "yes")
)
recipies
recipies <- data.frame(
type = factor(c("entree", "appetizer", "appetizer", "entree", "entree", "appetizer", "dessert", "dessert", "entree", "entree")),
ingredients = c(8, 4, 5, 10, 6, 8, 7, 15, 10, 9),
prepTime = c(15, 15, 5, 35, 20, 40, 25, 30, 10, 20),
cookTime = c(30, 15, 20, 55, 25, 10, 120, 25, 45, 60),
hasMeat = factor(c("yes", "yes", "yes", "no", "no", "yes", "no", "no", "yes", "yes")
))
recipies
x5 <- NULL
x5    # nothing there
x6 <- NA
x6    # vector of length 1
c(3, 10, NULL, 5)    # nothing in NULL spot
c(3, 10, NA, 5)      # NA in NA spot
# nature of operation determines type of result
NULL + 3
NULL > 0
str(mtcars)
mtcars$mpg
mtcars$size    # no size variable in mtcars --> NULL
# arithmetic operations involving NA result in NA
NA + 4
# nature of operation determines type of result
NULL + 3
NULL > 0
str(mtcars)
mtcars$mpg
mtcars$size    # no size variable in mtcars --> NULL
x <- i
x <- I
knitr::opts_chunk$set(echo = TRUE)
allRecipies <- rbind(recipies, recipies2)
View(recipies)
View(recipies2)
View(recipies)
knitr::opts_chunk$set(echo = TRUE)
lengths <- c(94, 109, 110, 123, 125, 108, 92, 106, 84,
119, 110, 140)
cat("Mean movie length (in min):\n",mean(lengths),"minutes")
paste0("The mean movie length is ",mean(lengths)," minutes.")
recipies <- data.frame(
type = factor(c("entree", "appetizer", "appetizer", "entree", "entree", "appetizer", "dessert", "dessert", "entree", "entree")),
ingredients = c(8, 4, 5, 10, 6, 8, 7, 15, 10, 9),
prepTime = c(15, 15, 5, 35, 20, 40, 25, 30, 10, 20),
cookTime = c(30, 15, 20, 55, 25, 10, 120, 25, 45, 60),
hasMeat = factor(c("yes", "yes", "yes", "no", "no", "yes", "no", "no", "yes", "yes")
))
recipies
recipies$totalTime <- recipies$prepTime + recipies$cookTime
recipies
recipies2 <- data.frame(
type = factor(c("appetizer", "entree", "dessert", "appetizer")),
ingredients = c(3, 15, 8, 5),
prepTime = c(10, 35, 45, 10),
cookTime = c(0, 90, 150, 20),
hasMeat = factor(c("no", "no", "no", "yes"))
)
recipies2
recipies2$totalTime <- recipies2$prepTime + recipies2$cookTime
recipies2
allRecipies <- rbind(recipies, recipies2)
allRecipies
View(allRecipies)
allRecipies[totalTime <= 60]
allRecipies[allRecipies$totalTime <= 60]
allRecipies[allRecipies$totalTime <= 60]
knitr::opts_chunk$set(echo = TRUE)
lengths <- c(94, 109, 110, 123, 125, 108, 92, 106, 84,
119, 110, 140)
cat("Mean movie length (in min):\n",mean(lengths),"minutes")
paste0("The mean movie length is ",mean(lengths)," minutes.")
recipies <- data.frame(
type = factor(c("entree", "appetizer", "appetizer", "entree", "entree", "appetizer", "dessert", "dessert", "entree", "entree")),
ingredients = c(8, 4, 5, 10, 6, 8, 7, 15, 10, 9),
prepTime = c(15, 15, 5, 35, 20, 40, 25, 30, 10, 20),
cookTime = c(30, 15, 20, 55, 25, 10, 120, 25, 45, 60),
hasMeat = factor(c("yes", "yes", "yes", "no", "no", "yes", "no", "no", "yes", "yes")
))
recipies
recipies$totalTime <- recipies$prepTime + recipies$cookTime
recipies
recipies2 <- data.frame(
type = factor(c("appetizer", "entree", "dessert", "appetizer")),
ingredients = c(3, 15, 8, 5),
prepTime = c(10, 35, 45, 10),
cookTime = c(0, 90, 150, 20),
hasMeat = factor(c("no", "no", "no", "yes"))
)
recipies2
recipies2$totalTime <- recipies2$prepTime + recipies2$cookTime
recipies2
allRecipies <- rbind(recipies, recipies2)
allRecipies
allRecipies[allRecipies$totalTime <= 60]
allRecipies[allRecipies$totalTime <= 60]
allRecipies[allRecipies$totalTime <= 60, ]
View(mtcars)
str(mtcars)
ncol(mtcars)
nrows(mtcars)
nrow(mtcars)
head(mtcars, n = 9)
mtcars$mpg
mean(mtcars$mpg)
# median
median(mtcars$mpg)
myData <- data.frame(mtcars$mpg
)
myData
myData <- data.frame(mtcars$mpg, mtcars$hp
)
myData
mpgAndHp <- subset(mtcars, select = c(mpg, hp))
myData
mpgAndHp = select(mtcars, mpg)
mpgAndHp = select(mtcars, "mpg")
mpgAndHp
mpgAndHp <- subset(mtcars, select = c(mpg, hp))
mpgAndHp
mpgAndHp[mpgAndHp$hp >= 105]
mpgAndHp[mpgAndHp$hp >= 105, ]
mpgAndHp[mpgAndHp$mpg < 20 | mpgAndHp$mpg > 25, ]
mpgAndHp[mpgAndHp$mpg >= 22 & mpgAndHp$hp > 95, ]
mpgAndHp[mpgAndHp$mpg >= 22 & mpgAndHp$hp < 95, ]
RestaurantTips <- read.csv("C:/Users/jacka/OneDrive - fairfield.edu/Spring 2024/Statistical Computing/datasets/RestaurantTips.csv")
View(RestaurantTips)
str(RestaurantTips)
library(readr)
AllCountries <- read_csv("datasets/AllCountries.csv")
View(AllCountries)
Auto <- read.csv("C:/Users/jacka/OneDrive - fairfield.edu/Spring 2024/Statistical Computing/datasets/Auto.csv", na.strings="?")
View(Auto)
