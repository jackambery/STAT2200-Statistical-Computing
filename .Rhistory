likelyhoods[i] <- 0
}
# print(likelyhoods)
likelyhoods2 <- vector()
ifelse(probabilities >= 0.5, 1, 0)
print(likelyhoods2)
probabilities <- c(0.25, 0.83, 0.76, 0.25, 0.33, 0.51, 0.67, 0.50, 0.54, 0.75, 0.71, 0.03, 0.38, 0.64, 0.19)
likelyhoods <- vector()
for (i in 1:length(probabilities))
if (probabilities[i] >= 0.5) {
likelyhoods[i] <- 1
} else {
likelyhoods[i] <- 0
}
print(likelyhoods)
likelyhoods2 <- vector()
ifelse(probabilities >= 0.5, 1, 0)
print(likelyhoods2)
probabilities <- c(0.25, 0.83, 0.76, 0.25, 0.33, 0.51, 0.67, 0.50, 0.54, 0.75, 0.71, 0.03, 0.38, 0.64, 0.19)
likelyhoods <- vector()
for (i in 1:length(probabilities))
if (probabilities[i] >= 0.5) {
likelyhoods[i] <- 1
} else {
likelyhoods[i] <- 0
}
print(likelyhoods)
likelyhoods2 <- vector()
ifelse(probabilities >= 0.5, 1, 0)
#print(likelyhoods2)
probabilities <- c(0.25, 0.83, 0.76, 0.25, 0.33, 0.51, 0.67, 0.50, 0.54, 0.75, 0.71, 0.03, 0.38, 0.64, 0.19)
likelyhoods <- vector()
for (i in 1:length(probabilities))
if (probabilities[i] >= 0.5) {
likelyhoods[i] <- 1
} else {
likelyhoods[i] <- 0
}
print(likelyhoods)
likelyhoods2 <- ifelse(probabilities >= 0.5, 1, 0)
#print(likelyhoods2)
probabilities <- c(0.25, 0.83, 0.76, 0.25, 0.33, 0.51, 0.67, 0.50, 0.54, 0.75, 0.71, 0.03, 0.38, 0.64, 0.19)
likelyhoods <- vector()
for (i in 1:length(probabilities))
if (probabilities[i] >= 0.5) {
likelyhoods[i] <- 1
} else {
likelyhoods[i] <- 0
}
print(likelyhoods)
likelyhoods2 <- ifelse(probabilities >= 0.5, 1, 0)
print(likelyhoods2)
probabilities <- c(0.25, 0.83, 0.76, 0.25, 0.33, 0.51, 0.67, 0.50, 0.54, 0.75, 0.71, 0.03, 0.38, 0.64, 0.19)
likelyhoods <- vector()
for (i in 1:length(probabilities))
if (probabilities[i] >= 0.5) {
likelyhoods[i] <- 1
} else {
likelyhoods[i] <- 0
}
print("Likelyhood using loop:")
print(likelyhoods)
likelyhoods2 <- ifelse(probabilities >= 0.5, 1, 0)
print("Likelyhood using ifelse:")
print(likelyhoods2)
probabilities <- c(0.25, 0.83, 0.76, 0.25, 0.33, 0.51, 0.67, 0.50, 0.54, 0.75, 0.71, 0.03, 0.38, 0.64, 0.19)
likelyhoods <- vector()
for (i in 1:length(probabilities))
if (probabilities[i] >= 0.5) {
likelyhoods[i] <- 1
} else {
likelyhoods[i] <- 0
}
print(Likelyhood using loop:)
probabilities <- c(0.25, 0.83, 0.76, 0.25, 0.33, 0.51, 0.67, 0.50, 0.54, 0.75, 0.71, 0.03, 0.38, 0.64, 0.19)
likelyhoods <- vector()
for (i in 1:length(probabilities))
if (probabilities[i] >= 0.5) {
likelyhoods[i] <- 1
} else {
likelyhoods[i] <- 0
}
print('Likelyhood using loop:')
print(likelyhoods)
likelyhoods2 <- ifelse(probabilities >= 0.5, 1, 0)
print('Likelyhood using ifelse:')
print(likelyhoods2)
library(readr)
Cars2020 <- read_csv("datasets/Cars2020.csv")
View(Cars2020)
Cars2020 <- read.csv("../datasets/Cars2020.csv")
fuelEff <- Cars2020$HwyMPG
fuelClass <- vector()
for (i in 1:length(fuelEff)) {
if (fuelEff[i] < 20) {
fuelClass[i] = "poor"
} else if (fuelEff[i] >= 20 & fuelEff[i] <= 25) {
fuelClass[i] = "acceptable"
} else if (fuelEff[i] > 25 & fuelEff[i] <= 35) {
fuelClass[i] = "good"
} else { #fuelEff[i] > 35
fuelClass[i] = "great"
}
}
print(fuelClass)
Cars2020 <- read.csv("../datasets/Cars2020.csv")
fuelEff <- Cars2020$HwyMPG
fuelClass <- vector()
for (i in 1:length(fuelEff)) {
if (fuelEff[i] < 20) {
fuelClass[i] = "poor"
} else if (fuelEff[i] >= 20 & fuelEff[i] <= 25) {
fuelClass[i] = "acceptable"
} else if (fuelEff[i] > 25 & fuelEff[i] <= 35) {
fuelClass[i] = "good"
} else { #fuelEff[i] > 35
fuelClass[i] = "great"
}
}
Cars2020$fuelClass <- fuelClass
Cars2020 <- read.csv("../datasets/Cars2020.csv")
fuelEff <- Cars2020$HwyMPG
fuelClass <- vector()
for (i in 1:length(fuelEff)) {
if (fuelEff[i] < 20) {
fuelClass[i] = "poor"
} else if (fuelEff[i] >= 20 & fuelEff[i] <= 25) {
fuelClass[i] = "acceptable"
} else if (fuelEff[i] > 25 & fuelEff[i] <= 35) {
fuelClass[i] = "good"
} else { #fuelEff[i] > 35
fuelClass[i] = "great"
}
}
Cars2020$fuelClass <- fuelClass
carStats <- cbind(Cars2020$Make, Cars2020$Model)
str(carStats)
Cars2020 <- read.csv("../datasets/Cars2020.csv")
fuelEff <- Cars2020$HwyMPG
fuelClass <- vector()
for (i in 1:length(fuelEff)) {
if (fuelEff[i] < 20) {
fuelClass[i] = "poor"
} else if (fuelEff[i] >= 20 & fuelEff[i] <= 25) {
fuelClass[i] = "acceptable"
} else if (fuelEff[i] > 25 & fuelEff[i] <= 35) {
fuelClass[i] = "good"
} else { #fuelEff[i] > 35
fuelClass[i] = "great"
}
}
Cars2020$fuelClass <- fuelClass
carStats <- cbind(Cars2020$Make, Cars2020$Model)
print(carStats)
print(Cars2020)
print(Cars2020)
Cars2020 <- read.csv("../datasets/Cars2020.csv")
fuelEff <- Cars2020$HwyMPG
fuelClass <- vector()
for (i in 1:length(fuelEff)) {
if (fuelEff[i] < 20) {
fuelClass[i] = "poor"
} else if (fuelEff[i] >= 20 & fuelEff[i] <= 25) {
fuelClass[i] = "acceptable"
} else if (fuelEff[i] > 25 & fuelEff[i] <= 35) {
fuelClass[i] = "good"
} else { #fuelEff[i] > 35
fuelClass[i] = "great"
}
}
Cars2020$fuelClass <- fuelClass
print(Cars2020[c("Make","Model","fuelClass")])
print(table)
table <- matrix(0, nrow = 6, ncol = 8)
print(table)
print(table)
table <- matrix(0, nrow = 6, ncol = 8)
print(table)
for(i in nrow(table)) {
for (j in ncol(table)) {
if (i + j %% 2 == 0) { # if even
table[i, j] <- i*j
} else {
table[i, j] <- i + j + 3
}
}
}
print(table)
### some useful functions to find the dimensions of a df:
### nrow(), ncol(), dim(), and str()
work
nrow(work)
ncol(work)
dim(work)    # number of rows, then number of columns
str(work)    # also displayed here, but worth knowing the other functions!
work
work[2, 3]   # subset value for 2nd obs, 3rd var
work[4, c(1, 3)]
work[4:6, 2:3]
table <- matrix(0, nrow = 6, ncol = 8)
print(table)
for(i in nrow(table)) {
for (j in ncol(table)) {
if (i + j %% 2 == 0) { # if even
table[i, j] <- i*j
} else {
table[i, j] <- i + j + 3
}
}
}
print(table)
table <- matrix(0, nrow = 6, ncol = 8)
for(i in nrow(table)) {
for (j in ncol(table)) {
if (i + j %% 2 == 0) { # if even
table[i, j] <- i*j
} else {
table[i, j] <- i + j + 3
}
}
}
print(table)
table <- matrix(0, nrow = 6, ncol = 8)
for(i in 1:nrow(table)) {
for (j in 1:ncol(table)) {
if (i + j %% 2 == 0) { # if even
table[i, j] <- i*j
} else {
table[i, j] <- i + j + 3
}
}
}
print(table)
table <- matrix(0, nrow = 6, ncol = 8)
for(i in 1:nrow(table)) {
for (j in 1:ncol(table)) {
if ((i + j) %% 2 == 0) { # if even
table[i, j] <- i*j
} else { # if odd
table[i, j] <- i + j + 3
}
}
}
print(table)
library(readr)
CourseGrades <- read_csv("datasets/CourseGrades.csv")
View(CourseGrades)
grades <- read.csv("../datasets/CourseGrades.csv")
for (i in 1:nrow(grades)) {
print(i)
}
grades <- read.csv("../datasets/CourseGrades.csv")
for (i in 1:nrow(grades)) {
hwPercent <- grades[i, 2]
print(hwPercent)
#finalGrade <- hwPercent + midterms + final
}
grades <- read.csv("../datasets/CourseGrades.csv")
for (i in 1:nrow(grades)) {
hwPercent <- grades[i, 2] * 0.35
midterm1 <- grades[i, 3] * 0.2
midterm1 <- grades[i, 4] * 0.2
final <- grades[i, 5] * 0.25
finalGrade <- hwPercent + midterms + final
print(finalGrade)
}
grades <- read.csv("../datasets/CourseGrades.csv")
for (i in 1:nrow(grades)) {
hwPercent <- grades[i, 2] * 0.35
midterm1 <- grades[i, 3] * 0.2
midterm2 <- grades[i, 4] * 0.2
final <- grades[i, 5] * 0.25
finalGrade <- hwPercent + midterm1 + midterm2 + final
print(finalGrade)
}
grades <- read.csv("../datasets/CourseGrades.csv")
FinalGrade <- vector()
for (i in 1:nrow(grades)) {
hwPercent <- grades[i, 2] * 0.35
midterm1 <- grades[i, 3] * 0.2
midterm2 <- grades[i, 4] * 0.2
final <- grades[i, 5] * 0.25
total <- hwPercent + midterm1 + midterm2 + final
FinalGrade[i] <- total
}
grades$FinalGrade <- FinalGrade
print(grades)
grades <- read.csv("../datasets/CourseGrades.csv")
FinalGrade <- vector()
LetterGrade <- vector()
for (i in 1:nrow(grades)) {
hwPercent <- grades[i, 2] * 0.35
midterm1 <- grades[i, 3] * 0.2
midterm2 <- grades[i, 4] * 0.2
final <- grades[i, 5] * 0.25
total <- hwPercent + midterm1 + midterm2 + final
FinalGrade[i] <- total
}
for (i in 1:length(FinalGrade)) {
if (FinalGrade[i] >= 90) {
LetterGrade[i] = "A"
} else if (FinalGrade[i] < 90 & FinalGrade[i] >= 80) {
LetterGrade[i] = "B"
} else if (FinalGrade[i] < 80 & FinalGrade[i] >= 70) {
LetterGrade[i] = "C"
} else if (FinalGrade[i] < 70 & FinalGrade[i] >= 60) {
LetterGrade[i] = "D"
} else { #FinalGrade[i] < 60
LetterGrade[i] = "F"
}
}
grades$LetterGrade <- LetterGrade
print(grades)
grades <- read.csv("../datasets/CourseGrades.csv")
FinalGrade <- vector()
LetterGrade <- vector()
for (i in 1:nrow(grades)) {
hwPercent <- grades[i, 2] * 0.35
midterm1 <- grades[i, 3] * 0.2
midterm2 <- grades[i, 4] * 0.2
final <- grades[i, 5] * 0.25
total <- hwPercent + midterm1 + midterm2 + final
FinalGrade[i] <- total
}
for (i in 1:length(FinalGrade)) {
if (FinalGrade[i] >= 90) {
LetterGrade[i] = "A"
} else if (FinalGrade[i] < 90 & FinalGrade[i] >= 80) {
LetterGrade[i] = "B"
} else if (FinalGrade[i] < 80 & FinalGrade[i] >= 70) {
LetterGrade[i] = "C"
} else if (FinalGrade[i] < 70 & FinalGrade[i] >= 60) {
LetterGrade[i] = "D"
} else { #FinalGrade[i] < 60
LetterGrade[i] = "F"
}
}
grades$NumGrade <- FinalGrade
grades$LetterGrade <- LetterGrade
print(grades)
knitr::opts_chunk$set(echo = TRUE)
grades <- read.csv("../datasets/CourseGrades.csv")
FinalGrade <- vector()
LetterGrade <- vector()
for (i in 1:nrow(grades)) {
hwPercent <- grades[i, 2] * 0.35
midterm1 <- grades[i, 3] * 0.2
midterm2 <- grades[i, 4] * 0.2
final <- grades[i, 5] * 0.25
total <- hwPercent + midterm1 + midterm2 + final
FinalGrade[i] <- total
}
for (i in 1:length(FinalGrade)) {
if (FinalGrade[i] >= 90) {
LetterGrade[i] = "A"
} else if (FinalGrade[i] < 90 & FinalGrade[i] >= 80) {
LetterGrade[i] = "B"
} else if (FinalGrade[i] < 80 & FinalGrade[i] >= 70) {
LetterGrade[i] = "C"
} else if (FinalGrade[i] < 70 & FinalGrade[i] >= 60) {
LetterGrade[i] = "D"
} else { #FinalGrade[i] < 60
LetterGrade[i] = "F"
}
}
grades$LetterGrade <- LetterGrade
print(grades)
gpas <- c(4,00, 3.50, 3.67, 3.33, 2.67, 3.42)
cumulatives <- vector()
for (i in length(gpas)) {
cumulatives[i] <- mean(gpas[1:i])
}
print(cumulatives)
gpas <- c(4,00, 3.50, 3.67, 3.33, 2.67, 3.42)
cumulatives <- vector()
for (i in 1:length(gpas)) {
cumulatives[i] <- mean(gpas[1:i])
}
print(cumulatives)
gpas <- c(4,00, 3.50, 3.67, 3.33, 2.67, 3.42, 3.56)
cumulatives <- vector()
for (i in 1:length(gpas)) {
cumulatives[i] <- mean(gpas[1:i])
}
print(cumulatives)
gpas <- c(4,00, 3.50, 3.67, 3.33, 2.67, 3.42, 3.56)
cumulatives <- vector()
for (i in 1:length(gpas)) {
cumulatives[i] <- mean(gpas[1:i])
}
print(gpas)
print(cumulatives)
knitr::opts_chunk$set(echo = TRUE)
arr <- c(5, rep(0, times = 19))
for (i in 1:19)
arr[i+1] <- (arr[i] * 1.5) - 1
print(arr)
probabilities <- c(0.25, 0.83, 0.76, 0.25, 0.33, 0.51, 0.67, 0.50, 0.54, 0.75, 0.71, 0.03, 0.38, 0.64, 0.19)
likelyhoods <- vector()
for (i in 1:length(probabilities))
if (probabilities[i] >= 0.5) {
likelyhoods[i] <- 1
} else {
likelyhoods[i] <- 0
}
print('Likelyhood using loop:')
print(likelyhoods)
likelyhoods2 <- ifelse(probabilities >= 0.5, 1, 0)
print('Likelyhood using ifelse:')
print(likelyhoods2)
Cars2020 <- read.csv("../datasets/Cars2020.csv")
fuelEff <- Cars2020$HwyMPG
fuelClass <- vector()
for (i in 1:length(fuelEff)) {
if (fuelEff[i] < 20) {
fuelClass[i] = "poor"
} else if (fuelEff[i] >= 20 & fuelEff[i] <= 25) {
fuelClass[i] = "acceptable"
} else if (fuelEff[i] > 25 & fuelEff[i] <= 35) {
fuelClass[i] = "good"
} else { #fuelEff[i] > 35
fuelClass[i] = "great"
}
}
# adding it to Cars2020 dataframe
Cars2020$fuelClass <- fuelClass
#printing out specific columns of Cars2020
print(Cars2020[c("Make","Model","fuelClass")])
table <- matrix(0, nrow = 6, ncol = 8)
for(i in 1:nrow(table)) {
for (j in 1:ncol(table)) {
if ((i + j) %% 2 == 0) { # if even
table[i, j] <- i*j
} else { # if odd
table[i, j] <- i + j + 3
}
}
}
print(table)
grades <- read.csv("../datasets/CourseGrades.csv")
FinalGrade <- vector()
LetterGrade <- vector()
for (i in 1:nrow(grades)) {
hwPercent <- grades[i, 2] * 0.35
midterm1 <- grades[i, 3] * 0.2
midterm2 <- grades[i, 4] * 0.2
final <- grades[i, 5] * 0.25
total <- hwPercent + midterm1 + midterm2 + final
FinalGrade[i] <- total
}
for (i in 1:length(FinalGrade)) {
if (FinalGrade[i] >= 90) {
LetterGrade[i] = "A"
} else if (FinalGrade[i] < 90 & FinalGrade[i] >= 80) {
LetterGrade[i] = "B"
} else if (FinalGrade[i] < 80 & FinalGrade[i] >= 70) {
LetterGrade[i] = "C"
} else if (FinalGrade[i] < 70 & FinalGrade[i] >= 60) {
LetterGrade[i] = "D"
} else { #FinalGrade[i] < 60
LetterGrade[i] = "F"
}
}
grades$LetterGrade <- LetterGrade
print(grades)
gpas <- c(4,00, 3.50, 3.67, 3.33, 2.67, 3.42, 3.56)
cumulatives <- vector()
for (i in 1:length(gpas)) {
cumulatives[i] <- mean(gpas[1:i])
}
print(gpas)
print(cumulatives)
gpas <- c(4.00, 3.50, 3.67, 3.33, 2.67, 3.42, 3.56)
cumulatives <- vector()
for (i in 1:length(gpas)) {
cumulatives[i] <- mean(gpas[1:i])
}
print(gpas)
print(cumulatives)
gpas <- c(4.00, 3.50, 3.67, 3.33, 2.67, 3.42, 3.56)
cumulatives <- vector()
for (i in 1:length(gpas)) {
cumulatives[i] <- mean(gpas[1:i])
}
cumulatives
gpas <- c(4.00, 3.50, 3.67, 3.33, 2.67, 3.42, 3.56)
cumulatives <- vector()
for (i in 1:length(gpas)) {
cumulatives[i] <- mean(gpas[1:i])
}
print("Cumulative GPAs:")
cumulatives
cumulative = 4.0
while (cumulative > 3.6) {
cumulative = cumulatives.next()
}
fib <- c(1, 1)
for (i in 3:40) {
fib[i] <- fib[i - 1] + fib[i - 2]
}
fib
fib <- c(0, 1)
for (i in 3:40) {
fib[i] <- fib[i - 1] + fib[i - 2]
}
fib
fib <- c(0, 1)
for (i in 3:40) {
fib[i] <- fib[i - 1] + fib[i - 2]
}
print("First 40 of Fiboncci:")
fib
