# Example 6
if (myvec < 6) {
a <- 10
}
a    # first comparison resulted in TRUE, so inner code evaluated
# Example 7
myvec
if (myvec[4] < 8 & myvec[5] > 7) {
a <- myvec[6]^2
}
a  # if statement resulted in TRUE, so inner code evaluated
# Example 8
myvec
if (myvec[4] > 2 & myvec[4] < 6) {
d <- myvec[6]^2
}
d  # if statement resulted in FALSE, so inner code not evaluated
# Example 8
myvec
if (myvec[4] < 5) {    # look at placement/matching of curly braces
a <- 10
} else {
a <- 20
}
a    # condition is FALSE, so if statement code is not run, but else
# Example 9
myvec
if (myvec > 0) {
c <- 5
}
c  # only first element checked... myvec[1] > 0 = TRUE, so c <- 5
if (myvec > 2) {
d <- 5
}
d  # only first element checked... myvec[1] > 2 = FALSE, so inner code not run
if (myvec > 2) {
e <- 5
} else {
e <- 8
}  # still only looking at first element!
e
# Example 10
myvec
# inputs to ifelse(): (1) condition, (2) what happens if condition is true,
#  and (3) what happens if condition is false
ifelse(myvec > 2, 1, 0)
mynewvec <- ifelse(myvec > 2, 1, 0)    # can store the new vector
mynewvec
# Example 11
x <- 5
y <- 3
if (x > y) {   # notice the formatting used
x <- 1
if (x <= 4) {
z <- 50
} else {
z <- 0
}
}
c(x, y, z)
# Example 12
x <- 5
y <- 3
if (x > 2*y) {
x <- 1
if (y >= 4) {
z <- 50
} else {
z <- 0
}
} else {
z <- 25
}
c(x, y, z)
# Example 13
x <- 1
y <- 2
if (x < 4 & y > 3) {
z <- 1
} else if (x >= 4 & y <= 3) {
z <- 2
} else {
z <- 3
}
# Example 15
x <- 5
y <- 10
z <- 8
if (x < y & y < z) {
w <- 1
} else if (x < y & y > z) {
w <- 2
} else if (x > y & y < z) {
w <- 3
} else {
w <- 4
}
w
library(readr)
Cars2020 <- read_csv("datasets/Cars2020.csv")
View(Cars2020)
knitr::opts_chunk$set(echo = TRUE)
Cars2020 <- read_csv("datasets/Cars2020.csv")
Cars2020 <- read_csv("/STAT2200-Statistical-Computing/datasets/Cars2020.csv")
Cars2020 <- read_csv("../datasets/Cars2020.csv")
str(Cars2020)
knitr::opts_chunk$set(echo = TRUE)
Cars2020 <- read_csv("../datasets/Cars2020.csv")
library(readr)
Cars2020 <- read_csv("../datasets/Cars2020.csv")
# str(Cars2020)
library(readr)
Cars2020 <- read_csv("datasets/Cars2020.csv")
View(Cars2020)
# Type
barplot(Cars2020[Type])
# Type
barplot(Cars2020$Type)
# Type
barchart(Cars2020$Type)
# Type
barplot(Cars2020$Type)
# Type
barplot(Cars2020$Type)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
Cars2020 <- read_csv("../datasets/Cars2020.csv")
# str(Cars2020)
# CityMPG
# Drive
# LowPrice
# Type
barplot(Cars2020$Type)
# CityMPG
# Drive
# LowPrice
# Type
type <- Cars2020$Type
barplot(type)
class(type)
head(type)
# Type
barplot(factor(Cars2020$Type))
# Type
barplot(table(Cars2020$Type))
# CityMPG
# Drive
# LowPrice
# Type
types <- table(Cars2020$Type)
barplot(types)
# CityMPG
# Drive
# LowPrice
# Type
types <- table(Cars2020$Type)
barplot(types)
# CityMPG
hist(Cars2020$CityMPG)
# Drive
drives <- table(Cars2020$Drive)
barplot(drives)
# LowPrice
hist(Cars2020$LowPrice)
summary(CityMPG)
summary(Cars2020$CityMPG)
iqr <- 19.0 - 13.25
iqr
summary(Cars2020$CityMPG)
range <- 28 - 10
range
# use na.rm = TRUE -> works w/ basically any function that calculates
#  a statistic
height <- c(60, 70, NA, 66)
# these don't work b/c of the NA
mean(height)
median(height)
sd(height)
quantile(height, 0.1)
# these work now that the NA has been "removed"
#  (really, ignored when calculating)
mean(height, na.rm = TRUE)
median(height, na.rm = TRUE)
sd(height, na.rm = TRUE)
quantile(height, 0.1, na.rm = TRUE)
quantile(Cars2020$CityMPG, 0.05)
quantile(Cars2020$CityMPG, 0.95)
mpgs <- Cars2020$CityMPG
summary(mpgs)
stdev(mpgs)
iqr <- 19.0 - 13.25
iqr
range <- 28 - 10
range
quantile(mpgs, 0.05)
quantile(mpgs, 0.95)
sd(mpgs)
table(types)
anyNA(Cars2020$Type)
table(Cars2020$Type)
table(Cars2020$Type)/nrow(Cars2020)
anyNA(Cars2020$Type) #FALSE
table(Cars2020$Type)
round(table(Cars2020$Type)/nrow(Cars2020), 2)
round(table(Cars2020$Type)/nrow(Cars2020))
table(Cars2020$Type)/nrow(Cars2020)
round((table(Cars2020$Type)/nrow(Cars2020)) * 100), 2)
round((table(Cars2020$Type)/nrow(Cars2020)) * 100), 2))
round((table(Cars2020$Type)/nrow(Cars2020)) * 100)), 2)
round(((table(Cars2020$Type)/nrow(Cars2020)) * 100)), 2)
round(((table(Cars2020$Type)/nrow(Cars2020)) * 100)), 2))
round(((table(Cars2020$Type)/nrow(Cars2020)) * 100), 2)
anyNA(Cars2020$Type) #FALSE
table(Cars2020$Type)
round(((table(Cars2020$Type)/nrow(Cars2020)) * 100), 2) #percentages
library(readr)
Hurricanes2018 <- read_csv("datasets/Hurricanes2018.csv")
View(Hurricanes2018)
library(readr)
Hurricanes2018 <- read_csv("datasets/Hurricanes2018.csv")
Hurricanes2018 <- read_csv("../datasets/Hurricanes2018.csv")
str(Hurricanes2018)
timeplot(Hurricanes2018$Year, Hurricanes2018$Hurricanes)
plot(Hurricanes2018$Year, Hurricanes2018$Hurricanes)
plot(Hurricanes2018$Year, Hurricanes2018$Hurricanes, xlab = "Year", ylab = "Number of Hurricanes")
points(Hurricanes2018$Year, Hurricanes2018$Hurricanes)
plot(Hurricanes2018$Year, Hurricanes2018$Hurricanes, xlab = "Year", ylab = "Number of Hurricanes")
points(Hurricanes2018$Year, Hurricanes2018$Hurricanes)
plot(Hurricanes2018$Year, Hurricanes2018$Hurricanes, xlab = "Year", ylab = "Number of Hurricanes", title = "Hurricanes Each Year")
plot(Hurricanes2018$Year, Hurricanes2018$Hurricanes, xlab = "Year", ylab = "Number of Hurricanes", title("Hurricanes Each Year")
plot(Hurricanes2018$Year, Hurricanes2018$Hurricanes, xlab = "Year", ylab = "Number of Hurricanes", title("Hurricanes Each Year"))
plot(Hurricanes2018$Year, Hurricanes2018$Hurricanes, xlab = "Year", ylab = "Number of Hurricanes", main = "Number of Hurricanes per Year")
lines(Hurricanes2018$Year, Hurricanes2018$Hurricanes)
# CityMPG
hist(Cars2020$CityMPG)
# LowPrice
hist(Cars2020$LowPrice)
# LowPrice
hist(Cars2020$LowPrice, xlab = "Low Prices of Cars", main = "")
# CityMPG
hist(Cars2020$CityMPG, xlab = "CityMPG of Cars", main = "Frequency of City MPGs")
# Drive
drives <- table(Cars2020$Drive, xlab = "Type of Drive", main = "Frequency of Different Types of Drive")
# CityMPG
hist(Cars2020$CityMPG, xlab = "CityMPG of Cars", main = "Frequency of City MPGs")
# Drive
drives <- table(Cars2020$Drive)
barplot(drives, xlab = "Type of Drive", main = "Frequency of Different Types of Drive")
# LowPrice
hist(Cars2020$LowPrice, xlab = "Low Prices of Cars", main = "Frequency of Low Prices")
# Type
types <- table(Cars2020$Type)
barplot(types, xlab = "Type of Car", main = "Frequency of Different Car Types")
library(readr)
HollywoodMovies <- read_csv("datasets/HollywoodMovies.csv")
View(HollywoodMovies)
knitr::opts_chunk$set(echo = TRUE)
HollywoodMovies <- read_csv("datasets/HollywoodMovies.csv")
HollywoodMovies <- read_csv("../datasets/HollywoodMovies.csv")
library(readr)
HollywoodMovies <- read_csv("../datasets/HollywoodMovies.csv")
library(readr)
HollywoodMovies <- read_csv("../datasets/HollywoodMovies.csv")
unique(HollywoodMovies$Genre)
unique(HollywoodMovies$Genre)
HollywoodMovies <- read_csv("../datasets/HollywoodMovies.csv", na.strings = "NA")
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = "NA")
library(readr)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = "NA")
```{r}
unique(HollywoodMovies$Genre)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv")
library(readr)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv")
```{r}
unique(HollywoodMovies$Genre)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = NA)
library(readr)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = NA)
```{r}
unique(HollywoodMovies$Genre)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
Cars2020 <- read_csv("../datasets/Cars2020.csv")
# str() prints out a page worth of text
# str(Cars2020)
# CityMPG
hist(Cars2020$CityMPG, xlab = "CityMPG of Cars",
main = "Frequency of City MPGs")
# Drive
drives <- table(Cars2020$Drive)
barplot(drives, xlab = "Type of Drive",
main = "Frequency of Different Types of Drive")
# LowPrice
hist(Cars2020$LowPrice, xlab = "Low Prices of Cars",
main = "Frequency of Low Prices")
# Type
types <- table(Cars2020$Type)
barplot(types, xlab = "Type of Car",
main = "Frequency of Different Car Types")
mpgs <- Cars2020$CityMPG
summary(mpgs)
sd(mpgs)
iqr <- 19.0 - 13.25
iqr
range <- 28 - 10
range
quantile(mpgs, 0.05)
quantile(mpgs, 0.95)
anyNA(Cars2020$Type) #FALSE
table(Cars2020$Type)
round(((table(Cars2020$Type)/nrow(Cars2020)) * 100), 2) #percentages
library(readr)
Hurricanes2018 <- read_csv("../datasets/Hurricanes2018.csv")
str(Hurricanes2018)
plot(Hurricanes2018$Year, Hurricanes2018$Hurricanes, xlab = "Year", ylab = "Number of Hurricanes", main = "Number of Hurricanes per Year")
lines(Hurricanes2018$Year, Hurricanes2018$Hurricanes)
library(readr)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = NA)
unique(HollywoodMovies$Genre)
View(autocsv)  # good except f
## Example 3: Auto.csv
autocsv <- read.csv(
"C:/Users/ccasement/Dropbox (Fairfield University)/STAT 2200/Data/Auto.csv"
)
```{r}
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = NA)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = NA)
```{r}
unique(HollywoodMovies$Genre)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = "")
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = "")
```{r}
unique(HollywoodMovies$Genre)
barplot(HollywoodMovies$DomesticGross, HollywoodMovies$Genre["action", "drama", "romance"])
barplot(HollywoodMovies$DomesticGross, HollywoodMovies$Genre["action"])
barplot(HollywoodMovies$DomesticGross, HollywoodMovies$Genre[Genre = "action"])
barplot(HollywoodMovies$DomesticGross, HollywoodMovies$Genre[Genre == "action"])
knitr::opts_chunk$set(echo = TRUE)
library(readr)
Cars2020 <- read_csv("../datasets/Cars2020.csv")
# str() prints out a page worth of text
# str(Cars2020)
# CityMPG
hist(Cars2020$CityMPG, xlab = "CityMPG of Cars",
main = "Frequency of City MPGs")
# Drive
drives <- table(Cars2020$Drive)
barplot(drives, xlab = "Type of Drive",
main = "Frequency of Different Types of Drive")
# LowPrice
hist(Cars2020$LowPrice, xlab = "Low Prices of Cars",
main = "Frequency of Low Prices")
# Type
types <- table(Cars2020$Type)
barplot(types, xlab = "Type of Car",
main = "Frequency of Different Car Types")
mpgs <- Cars2020$CityMPG
summary(mpgs)
sd(mpgs)
iqr <- 19.0 - 13.25
iqr
range <- 28 - 10
range
quantile(mpgs, 0.05)
quantile(mpgs, 0.95)
anyNA(Cars2020$Type) #FALSE
table(Cars2020$Type)
round(((table(Cars2020$Type)/nrow(Cars2020)) * 100), 2) #percentages
library(readr)
Hurricanes2018 <- read_csv("../datasets/Hurricanes2018.csv")
str(Hurricanes2018)
plot(Hurricanes2018$Year, Hurricanes2018$Hurricanes, xlab = "Year", ylab = "Number of Hurricanes", main = "Number of Hurricanes per Year")
lines(Hurricanes2018$Year, Hurricanes2018$Hurricanes)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = "")
unique(HollywoodMovies$Genre)
barplot(HollywoodMovies$DomesticGross, HollywoodMovies$Genre[Genre == "action"])
unique(HollywoodMovies$Genre)
genre <- HollywoodMovies$Genre
dgross <- HollywoodMovies$DomesticGross
barplot(dgross, genre[genre == "action"])
barplot(genre[genre == "action"], dgross)
plot(genre[genre == "action"], dgross)
plot(dgross, genre[genre == "action"])
plot(dgross[genre == "action"], genre[genre == "action"])
unique(HollywoodMovies$Genre)
genre <- HollywoodMovies$Genre
dgross <- HollywoodMovies$DomesticGross
plot(dgross[genre == "action"], genre[genre == "action"])
barplot(dgross[genre == "action"], genre[genre == "action"])
barchart(dgross[genre == "action"], genre[genre == "action"])
plot(dgross[genre == "action"], genre[genre == "action"])
plot(dgross[genre == "action"], genre[genre == "action"], xlim = 0)
plot(dgross[genre == "action"], genre[genre == "action"], xlim = 1)
plot( genre[genre == "action"], dgross[genre == "action"])
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = "")
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = "")
```{r}
unique(HollywoodMovies$Genre)
genre <- HollywoodMovies$Genre
dgross <- HollywoodMovies$DomesticGross
plot(genre[genre == "action"], dgross[genre == "action"])
boxplot(genre[genre == "action"], dgross[genre == "action"])
boxplot(genre[genre == "action"], dgross)
boxplot(genre[genre == "action" | "romance"], dgross)
boxplot(genre[genre == "action" | genre == "romance"], dgross)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = "")
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = "")
```{r}
unique(HollywoodMovies$Genre)
genre <- HollywoodMovies$Genre
dgross <- HollywoodMovies$DomesticGross
boxplot(genre[genre == "action"], dgross)
boxplot(genre[genre == "action"], dgross, ylab = "Domestic Gross", xlab = "Movie Genres")
boxplot(genre, dgross, ylab = "Domestic Gross", xlab = "Movie Genres")
boxplot(dgross, genre, ylab = "Domestic Gross", xlab = "Movie Genres")
boxplot(genre[genre == "action", dgross, ylab = "Domestic Gross", xlab = "Movie Genres")
boxplot(genre[genre == "action"], dgross, ylab = "Domestic Gross", xlab = "Movie Genres")
genre <- HollywoodMovies$Genre
dgross <- HollywoodMovies$DomesticGross
genres <- cbind(genre[genre == "action"], genre[genre == "drama"], genre[genre == "romance"])
boxplot(genres, dgross, ylab = "Domestic Gross", xlab = "Movie Genres")
genres <- cbind(dgross[genre == "action"], dgross[genre == "drama"], dgross[genre == "romance"])
boxplot(genres, dgross, ylab = "Domestic Gross", xlab = "Movie Genres")
unique(HollywoodMovies$Genre)
genre <- HollywoodMovies$Genre
dgross <- HollywoodMovies$DomesticGross
genres <- cbind(dgross[genre == "action"], dgross[genre == "drama"], dgross[genre == "romance"])
boxplot(genres, dgross, ylab = "Domestic Gross", xlab = "Movie Genres")
boxplot(genres, dgross, ylab = "Domestic Gross", xlab = "Movie Genres", beside=T)
boxplot(dgross[genre == "action"], ylab = "Domestic Gross", xlab = "Movie Genres", beside=T)
boxplot(dgross[genre == "action"], ylab = "Domestic Gross", xlab = "Movie Genres")
boxplot(dgross)
boxplot(dgross[genre == "action"])
boxplot(dgross[genre == "action"], ylab = "Domestic Gross", xlab = "Movie Genres")
boxplot(dgross[genre == "action"], ylab = "Domestic Gross", xlab = "Movie Genres", ylim = 0)
boxplot(dgross[genre == "Action"], ylab = "Domestic Gross", xlab = "Movie Genres", ylim = 0)
boxplot(dgross[genre == "Action"], ylab = "Domestic Gross", xlab = "Movie Genres")
boxplot(dgross[genre == "Action" | "Romance"], ylab = "Domestic Gross", xlab = "Movie Genres")
boxplot(dgross[genre == "Action" | genre == "Romance"], ylab = "Domestic Gross", xlab = "Movie Genres")
genres <- cbind(dgross[genre == "Action"], dgross[genre == "Drama"], dgross[genre == "Romance"])
boxplot(dgross[genre == "Action" | genre == "Romance"], ylab = "Domestic Gross", xlab = "Movie Genres")
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres")
text(x = 1, y = 0, labels = "Data set values")
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies")
text(x = 1, y = 0, labels = "Data set values")
unique(HollywoodMovies$Genre)
genre <- HollywoodMovies$Genre
dgross <- HollywoodMovies$DomesticGross
genres <- cbind(dgross[genre == "Action"], dgross[genre == "Drama"], dgross[genre == "Romance"])
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies")
text(x = 1, y = 0, labels = "Data set values")
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies")
text(x = 1, y = 0, labels = "Data set values")
text(x = 1, y = 1, labels = "Data set values")
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies")
text(x = 1, y = 1, labels = "Data set values")
### plot() makes a scatterplot
################################
xvar <- c(2, 3, 8, 6, 4, 1, 5, 3, 6)
yvar <- c(6, 4, 8, 10, 7, 2, 6, 4, 4)
plot(x = xvar, y = yvar)   # safest to specify which variable is x vs. y
plot(xvar, yvar)           # first input is x variable, second is y variable
# using data from a data frame
mydf <- data.frame(
x = c(2, 3, 8, 6, 4, 1, 5, 3, 6),
y = c(6, 4, 8, 10, 7, 2, 6, 4, 4)
)
mydf
plot(x = mydf$x, y = mydf$y)
# plot() makes side-by-side boxplots if x variable is a factor and
#  y variable is a numeric (or integer) vector
str(mtcars)
mtcars$cyl
mtcars$mpg
plot(x = as.factor(mtcars$cyl), y = mtcars$mpg)    # good
plot(y = as.factor(mtcars$cyl), x = mtcars$mpg)    # not what we want
# use xlab and ylab to add x-axis and y-axis labels, respectively
plot(xvar, yvar, xlab = "x-variable name", ylab = "y-variable name")
# use abline() to specify y-intercept and slope of line
plot(xvar, yvar)
abline(a = 3, b = 0.75)    # a = y-intercept, b = slope
plot(xvar, yvar)
abline(a = 6, b = 0)    # slope = 0 -> horizontal line
### use text() to add text
#################################
plot(xvar, yvar)
# specify coordinates of text based on values in plot
text(x = 2, y = 9, labels = "Data set values")
text(x = c(1, 2, 3), y = 2, labels = c("Action", "Drama", "Romance"))
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies")
text(x = c(1, 2, 3), y = 2, labels = c("Action", "Drama", "Romance"))
boxtext(x = c(1, 2, 3), y = 2, labels = c("Action", "Drama", "Romance"))
text(x = c(1, 2, 3), y = 2, labels = c("Action", "Drama", "Romance"))
plot.new
plot.new()
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies")
text(x = c(1, 2, 3), y = 2, labels = c("Action", "Drama", "Romance"))
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies")
plot.new()
text(x = c(1, 2, 3), y = 2, labels = c("Action", "Drama", "Romance"))
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies", labels("action", "drama", "romance"))
dgross <- HollywoodMovies$DomesticGross
genres <- cbind(dgross[genre == "Action"], dgross[genre == "Drama"], dgross[genre == "Romance"])
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies", labels("action", "drama", "romance"))
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies", labels("action", "drama", "romance"))
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies", labels("action", "drama", "romance"))
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies", labels("action", "drama", "romance"))
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies", labels = c("action", "drama", "romance"))
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies", labels = c("action", "drama", "romance"))
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies", labels = c("action", "drama", "romance"))
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies")
