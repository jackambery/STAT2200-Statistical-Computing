library(readr)
HollywoodMovies <- read_csv("datasets/HollywoodMovies.csv")
View(HollywoodMovies)
knitr::opts_chunk$set(echo = TRUE)
HollywoodMovies <- read_csv("datasets/HollywoodMovies.csv")
HollywoodMovies <- read_csv("../datasets/HollywoodMovies.csv")
library(readr)
HollywoodMovies <- read_csv("../datasets/HollywoodMovies.csv")
library(readr)
HollywoodMovies <- read_csv("../datasets/HollywoodMovies.csv")
unique(HollywoodMovies$Genre)
unique(HollywoodMovies$Genre)
HollywoodMovies <- read_csv("../datasets/HollywoodMovies.csv", na.strings = "NA")
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = "NA")
library(readr)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = "NA")
```{r}
unique(HollywoodMovies$Genre)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv")
library(readr)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv")
```{r}
unique(HollywoodMovies$Genre)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = NA)
library(readr)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = NA)
```{r}
unique(HollywoodMovies$Genre)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
Cars2020 <- read_csv("../datasets/Cars2020.csv")
# str() prints out a page worth of text
# str(Cars2020)
# CityMPG
hist(Cars2020$CityMPG, xlab = "CityMPG of Cars",
main = "Frequency of City MPGs")
# Drive
drives <- table(Cars2020$Drive)
barplot(drives, xlab = "Type of Drive",
main = "Frequency of Different Types of Drive")
# LowPrice
hist(Cars2020$LowPrice, xlab = "Low Prices of Cars",
main = "Frequency of Low Prices")
# Type
types <- table(Cars2020$Type)
barplot(types, xlab = "Type of Car",
main = "Frequency of Different Car Types")
mpgs <- Cars2020$CityMPG
summary(mpgs)
sd(mpgs)
iqr <- 19.0 - 13.25
iqr
range <- 28 - 10
range
quantile(mpgs, 0.05)
quantile(mpgs, 0.95)
anyNA(Cars2020$Type) #FALSE
table(Cars2020$Type)
round(((table(Cars2020$Type)/nrow(Cars2020)) * 100), 2) #percentages
library(readr)
Hurricanes2018 <- read_csv("../datasets/Hurricanes2018.csv")
str(Hurricanes2018)
plot(Hurricanes2018$Year, Hurricanes2018$Hurricanes, xlab = "Year", ylab = "Number of Hurricanes", main = "Number of Hurricanes per Year")
lines(Hurricanes2018$Year, Hurricanes2018$Hurricanes)
library(readr)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = NA)
unique(HollywoodMovies$Genre)
View(autocsv)  # good except f
## Example 3: Auto.csv
autocsv <- read.csv(
"C:/Users/ccasement/Dropbox (Fairfield University)/STAT 2200/Data/Auto.csv"
)
```{r}
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = NA)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = NA)
```{r}
unique(HollywoodMovies$Genre)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = "")
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = "")
```{r}
unique(HollywoodMovies$Genre)
barplot(HollywoodMovies$DomesticGross, HollywoodMovies$Genre["action", "drama", "romance"])
barplot(HollywoodMovies$DomesticGross, HollywoodMovies$Genre["action"])
barplot(HollywoodMovies$DomesticGross, HollywoodMovies$Genre[Genre = "action"])
barplot(HollywoodMovies$DomesticGross, HollywoodMovies$Genre[Genre == "action"])
knitr::opts_chunk$set(echo = TRUE)
library(readr)
Cars2020 <- read_csv("../datasets/Cars2020.csv")
# str() prints out a page worth of text
# str(Cars2020)
# CityMPG
hist(Cars2020$CityMPG, xlab = "CityMPG of Cars",
main = "Frequency of City MPGs")
# Drive
drives <- table(Cars2020$Drive)
barplot(drives, xlab = "Type of Drive",
main = "Frequency of Different Types of Drive")
# LowPrice
hist(Cars2020$LowPrice, xlab = "Low Prices of Cars",
main = "Frequency of Low Prices")
# Type
types <- table(Cars2020$Type)
barplot(types, xlab = "Type of Car",
main = "Frequency of Different Car Types")
mpgs <- Cars2020$CityMPG
summary(mpgs)
sd(mpgs)
iqr <- 19.0 - 13.25
iqr
range <- 28 - 10
range
quantile(mpgs, 0.05)
quantile(mpgs, 0.95)
anyNA(Cars2020$Type) #FALSE
table(Cars2020$Type)
round(((table(Cars2020$Type)/nrow(Cars2020)) * 100), 2) #percentages
library(readr)
Hurricanes2018 <- read_csv("../datasets/Hurricanes2018.csv")
str(Hurricanes2018)
plot(Hurricanes2018$Year, Hurricanes2018$Hurricanes, xlab = "Year", ylab = "Number of Hurricanes", main = "Number of Hurricanes per Year")
lines(Hurricanes2018$Year, Hurricanes2018$Hurricanes)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = "")
unique(HollywoodMovies$Genre)
barplot(HollywoodMovies$DomesticGross, HollywoodMovies$Genre[Genre == "action"])
unique(HollywoodMovies$Genre)
genre <- HollywoodMovies$Genre
dgross <- HollywoodMovies$DomesticGross
barplot(dgross, genre[genre == "action"])
barplot(genre[genre == "action"], dgross)
plot(genre[genre == "action"], dgross)
plot(dgross, genre[genre == "action"])
plot(dgross[genre == "action"], genre[genre == "action"])
unique(HollywoodMovies$Genre)
genre <- HollywoodMovies$Genre
dgross <- HollywoodMovies$DomesticGross
plot(dgross[genre == "action"], genre[genre == "action"])
barplot(dgross[genre == "action"], genre[genre == "action"])
barchart(dgross[genre == "action"], genre[genre == "action"])
plot(dgross[genre == "action"], genre[genre == "action"])
plot(dgross[genre == "action"], genre[genre == "action"], xlim = 0)
plot(dgross[genre == "action"], genre[genre == "action"], xlim = 1)
plot( genre[genre == "action"], dgross[genre == "action"])
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = "")
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = "")
```{r}
unique(HollywoodMovies$Genre)
genre <- HollywoodMovies$Genre
dgross <- HollywoodMovies$DomesticGross
plot(genre[genre == "action"], dgross[genre == "action"])
boxplot(genre[genre == "action"], dgross[genre == "action"])
boxplot(genre[genre == "action"], dgross)
boxplot(genre[genre == "action" | "romance"], dgross)
boxplot(genre[genre == "action" | genre == "romance"], dgross)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = "")
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = "")
```{r}
unique(HollywoodMovies$Genre)
genre <- HollywoodMovies$Genre
dgross <- HollywoodMovies$DomesticGross
boxplot(genre[genre == "action"], dgross)
boxplot(genre[genre == "action"], dgross, ylab = "Domestic Gross", xlab = "Movie Genres")
boxplot(genre, dgross, ylab = "Domestic Gross", xlab = "Movie Genres")
boxplot(dgross, genre, ylab = "Domestic Gross", xlab = "Movie Genres")
boxplot(genre[genre == "action", dgross, ylab = "Domestic Gross", xlab = "Movie Genres")
boxplot(genre[genre == "action"], dgross, ylab = "Domestic Gross", xlab = "Movie Genres")
genre <- HollywoodMovies$Genre
dgross <- HollywoodMovies$DomesticGross
genres <- cbind(genre[genre == "action"], genre[genre == "drama"], genre[genre == "romance"])
boxplot(genres, dgross, ylab = "Domestic Gross", xlab = "Movie Genres")
genres <- cbind(dgross[genre == "action"], dgross[genre == "drama"], dgross[genre == "romance"])
boxplot(genres, dgross, ylab = "Domestic Gross", xlab = "Movie Genres")
unique(HollywoodMovies$Genre)
genre <- HollywoodMovies$Genre
dgross <- HollywoodMovies$DomesticGross
genres <- cbind(dgross[genre == "action"], dgross[genre == "drama"], dgross[genre == "romance"])
boxplot(genres, dgross, ylab = "Domestic Gross", xlab = "Movie Genres")
boxplot(genres, dgross, ylab = "Domestic Gross", xlab = "Movie Genres", beside=T)
boxplot(dgross[genre == "action"], ylab = "Domestic Gross", xlab = "Movie Genres", beside=T)
boxplot(dgross[genre == "action"], ylab = "Domestic Gross", xlab = "Movie Genres")
boxplot(dgross)
boxplot(dgross[genre == "action"])
boxplot(dgross[genre == "action"], ylab = "Domestic Gross", xlab = "Movie Genres")
boxplot(dgross[genre == "action"], ylab = "Domestic Gross", xlab = "Movie Genres", ylim = 0)
boxplot(dgross[genre == "Action"], ylab = "Domestic Gross", xlab = "Movie Genres", ylim = 0)
boxplot(dgross[genre == "Action"], ylab = "Domestic Gross", xlab = "Movie Genres")
boxplot(dgross[genre == "Action" | "Romance"], ylab = "Domestic Gross", xlab = "Movie Genres")
boxplot(dgross[genre == "Action" | genre == "Romance"], ylab = "Domestic Gross", xlab = "Movie Genres")
genres <- cbind(dgross[genre == "Action"], dgross[genre == "Drama"], dgross[genre == "Romance"])
boxplot(dgross[genre == "Action" | genre == "Romance"], ylab = "Domestic Gross", xlab = "Movie Genres")
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres")
text(x = 1, y = 0, labels = "Data set values")
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies")
text(x = 1, y = 0, labels = "Data set values")
unique(HollywoodMovies$Genre)
genre <- HollywoodMovies$Genre
dgross <- HollywoodMovies$DomesticGross
genres <- cbind(dgross[genre == "Action"], dgross[genre == "Drama"], dgross[genre == "Romance"])
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies")
text(x = 1, y = 0, labels = "Data set values")
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies")
text(x = 1, y = 0, labels = "Data set values")
text(x = 1, y = 1, labels = "Data set values")
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies")
text(x = 1, y = 1, labels = "Data set values")
### plot() makes a scatterplot
################################
xvar <- c(2, 3, 8, 6, 4, 1, 5, 3, 6)
yvar <- c(6, 4, 8, 10, 7, 2, 6, 4, 4)
plot(x = xvar, y = yvar)   # safest to specify which variable is x vs. y
plot(xvar, yvar)           # first input is x variable, second is y variable
# using data from a data frame
mydf <- data.frame(
x = c(2, 3, 8, 6, 4, 1, 5, 3, 6),
y = c(6, 4, 8, 10, 7, 2, 6, 4, 4)
)
mydf
plot(x = mydf$x, y = mydf$y)
# plot() makes side-by-side boxplots if x variable is a factor and
#  y variable is a numeric (or integer) vector
str(mtcars)
mtcars$cyl
mtcars$mpg
plot(x = as.factor(mtcars$cyl), y = mtcars$mpg)    # good
plot(y = as.factor(mtcars$cyl), x = mtcars$mpg)    # not what we want
# use xlab and ylab to add x-axis and y-axis labels, respectively
plot(xvar, yvar, xlab = "x-variable name", ylab = "y-variable name")
# use abline() to specify y-intercept and slope of line
plot(xvar, yvar)
abline(a = 3, b = 0.75)    # a = y-intercept, b = slope
plot(xvar, yvar)
abline(a = 6, b = 0)    # slope = 0 -> horizontal line
### use text() to add text
#################################
plot(xvar, yvar)
# specify coordinates of text based on values in plot
text(x = 2, y = 9, labels = "Data set values")
text(x = c(1, 2, 3), y = 2, labels = c("Action", "Drama", "Romance"))
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies")
text(x = c(1, 2, 3), y = 2, labels = c("Action", "Drama", "Romance"))
boxtext(x = c(1, 2, 3), y = 2, labels = c("Action", "Drama", "Romance"))
text(x = c(1, 2, 3), y = 2, labels = c("Action", "Drama", "Romance"))
plot.new
plot.new()
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies")
text(x = c(1, 2, 3), y = 2, labels = c("Action", "Drama", "Romance"))
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies")
plot.new()
text(x = c(1, 2, 3), y = 2, labels = c("Action", "Drama", "Romance"))
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies", labels("action", "drama", "romance"))
dgross <- HollywoodMovies$DomesticGross
genres <- cbind(dgross[genre == "Action"], dgross[genre == "Drama"], dgross[genre == "Romance"])
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies", labels("action", "drama", "romance"))
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies", labels("action", "drama", "romance"))
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies", labels("action", "drama", "romance"))
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies", labels("action", "drama", "romance"))
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies", labels = c("action", "drama", "romance"))
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies", labels = c("action", "drama", "romance"))
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies", labels = c("action", "drama", "romance"))
boxplot(genres, ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies")
library(readr)
spotify_2023 <- read_csv("Final Project/spotify-2023.csv")
View(spotify_2023)
attach(spotify_2023)
barplot(key)
barplot(spotify_2023$key)
boxplot(key, streams)
boxplot(streams)
barplot(key)
keys <- table(key)
barplot(keys)
modes <- table(mode)
barplot(modes)
cor(spotify_2023$released_year, streams)
cor(spotify_2023$released_year, spotify_2023$streams)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
Cars2020 <- read_csv("../datasets/Cars2020.csv")
# str() prints out a page worth of text
# str(Cars2020)
# CityMPG
hist(Cars2020$CityMPG, xlab = "CityMPG of Cars",
main = "Frequency of City MPGs")
# Drive
drives <- table(Cars2020$Drive)
barplot(drives, xlab = "Type of Drive",
main = "Frequency of Different Types of Drive")
# LowPrice
hist(Cars2020$LowPrice, xlab = "Low Prices of Cars",
main = "Frequency of Low Prices")
# Type
types <- table(Cars2020$Type)
barplot(types, xlab = "Type of Car",
main = "Frequency of Different Car Types")
mpgs <- Cars2020$CityMPG
summary(mpgs)
sd(mpgs)
iqr <- 19.0 - 13.25
iqr
range <- 28 - 10
range
quantile(mpgs, 0.05)
quantile(mpgs, 0.95)
anyNA(Cars2020$Type) #FALSE
table(Cars2020$Type)
round(((table(Cars2020$Type)/nrow(Cars2020)) * 100), 2) #percentages
library(readr)
Hurricanes2018 <- read_csv("../datasets/Hurricanes2018.csv")
str(Hurricanes2018)
plot(Hurricanes2018$Year, Hurricanes2018$Hurricanes, xlab = "Year", ylab = "Number of Hurricanes", main = "Number of Hurricanes per Year")
lines(Hurricanes2018$Year, Hurricanes2018$Hurricanes)
HollywoodMovies <- read.csv("../datasets/HollywoodMovies.csv", na.strings = "")
unique(HollywoodMovies$Genre)
genre <- HollywoodMovies$Genre
dgross <- HollywoodMovies$DomesticGross
boxplot(dgross[genre == "Action"], dgross[genre == "Drama"], dgross[genre == "Romance"], ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies")
unique(HollywoodMovies$Genre)
genre <- HollywoodMovies$Genre
dgross <- HollywoodMovies$DomesticGross
boxplot(dgross[genre == "Action"], dgross[genre == "Drama"], dgross[genre == "Romance"], ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies")
names = c("Action", "Drama", "Romance")
unique(HollywoodMovies$Genre)
genre <- HollywoodMovies$Genre
dgross <- HollywoodMovies$DomesticGross
boxplot(dgross[genre == "Action"], dgross[genre == "Drama"], dgross[genre == "Romance"], ylab = "Domestic Gross", xlab = "Movie Genres", main = "Domestic Gross of Action, Drama, and Romance Movies", names = c("Action", "Drama", "Romance"))
library(readr)
mlb2011 <- read_csv("datasets/mlb2011.csv")
View(mlb2011)
mlb2011 <- read.csv("datasets/mlb2011.csv")
mlb2011 <- read.csv("/datasets/mlb2011.csv")
mlb2011 <- read.csv("../datasets/mlb2011.csv")
mlb2011 <- read.csv("../datasets/mlb2011.csv")
library(readr)
Hurricanes2018 <- read.csv("../datasets/Hurricanes2018.csv")
str(Hurricanes2018)
library(readr)
Cars2020 <- read.csv("../datasets/Cars2020.csv")
# str() prints out a page worth of text
# str(Cars2020)
library(readr)
Cars2020 <- read.csv("../datasets/Cars2020.csv")
str() prints out a page worth of text
library(readr)
Cars2020 <- read.csv("../datasets/Cars2020.csv")
str()
library(readr)
Cars2020 <- read.csv("../datasets/Cars2020.csv")
str(Cars2020)
NLPitchers <- (mlb2011[league == 'NL' & gamesStarted >= 10])
league <- mlb2011$LG
gamesStarted <- mlb2011$GS
NLPitchers <- (mlb2011[league == 'NL' & gamesStarted >= 10])
NLPitchers <- (mlb2011[,league == 'NL' & gamesStarted >= 10])
NLPitchers <- (mlb2011[,(league == 'NL' & gamesStarted >= 10)])
NLPitchers <- (mlb2011[league == 'NL' & gamesStarted >= 10,])
View(NLPitchers)
View(NLPitchers)
View(ALPitchers)
ALPitchers <- mlb2011[league == 'AL' & gamesStarted >= 10,]
View(ALPitchers)
par(mfrow=c(1,2))
plot(NLPitchers$SOA, NLPitchers$W)
plot(NLPitchers$SOA, NLPitchers$W)
par(mfrow=c(1,2))
plot(NLPitchers$SOA, NLPitchers$W)
plot(ALPitchers$SOA, ALPitchers$W)
par(mfrow=c(1,2))
plot(NLPitchers$SOA, NLPitchers$W)
plot(ALPitchers$SOA, ALPitchers$W)
plot((NLPitchers$SOA, ALPitchers$SOA), NLPitchers$W)
plot((NLPitchers$SOA ALPitchers$SOA), NLPitchers$W)
plot(NLPitchers$SOA, NLPitchers$W, col='red')
plot(ALPitchers$SOA, ALPitchers$W, col='blue')
plot(NLPitchers$SOA, NLPitchers$W, col='red')
points(ALPitchers$SOA, ALPitchers$W, col='blue')
league <- mlb2011$LG
gamesStarted <- mlb2011$GS
NLPitchers <- mlb2011[league == 'NL' & gamesStarted >= 10,]
ALPitchers <- mlb2011[league == 'AL' & gamesStarted >= 10,]
plot(NLPitchers$SOA, NLPitchers$W, col='red')
points(ALPitchers$SOA, ALPitchers$W, col='blue')
points(ALPitchers$SOA, ALPitchers$W, col='blue')
league <- mlb2011$LG
gamesStarted <- mlb2011$GS
NLPitchers <- mlb2011[league == 'NL' & gamesStarted >= 10,]
ALPitchers <- mlb2011[league == 'AL' & gamesStarted >= 10,]
plot(NLPitchers$SOA, NLPitchers$W, col='red')
points(ALPitchers$SOA, ALPitchers$W, col='blue')
abline(a = 0.945, b = 0.073, col='blue')
abline(a = 1.966, b = 0.059, col='red')
league <- mlb2011$LG
gamesStarted <- mlb2011$GS
NLPitchers <- mlb2011[league == 'NL' & gamesStarted >= 10,]
ALPitchers <- mlb2011[league == 'AL' & gamesStarted >= 10,]
plot(NLPitchers$SOA, NLPitchers$W,
col='red'
main='Number of Strikeouts vs. Wins in the MLB National and American Leagues')
league <- mlb2011$LG
gamesStarted <- mlb2011$GS
NLPitchers <- mlb2011[league == 'NL' & gamesStarted >= 10,]
ALPitchers <- mlb2011[league == 'AL' & gamesStarted >= 10,]
plot(NLPitchers$SOA, NLPitchers$W,
col='red',
main='Number of Strikeouts vs. Wins in the MLB National and American Leagues')
points(ALPitchers$SOA, ALPitchers$W, col='blue')
abline(a = 1.966, b = 0.059, col='red')
abline(a = 0.945, b = 0.073, col='blue')
league <- mlb2011$LG
gamesStarted <- mlb2011$GS
NLPitchers <- mlb2011[league == 'NL' & gamesStarted >= 10,]
ALPitchers <- mlb2011[league == 'AL' & gamesStarted >= 10,]
plot(NLPitchers$SOA, NLPitchers$W,
col='red',
main='Number of Strikeouts vs. Wins\nin the MLB National and American Leagues')
points(ALPitchers$SOA, ALPitchers$W, col='blue')
abline(a = 1.966, b = 0.059, col='red')
abline(a = 0.945, b = 0.073, col='blue')
league <- mlb2011$LG
gamesStarted <- mlb2011$GS
NLPitchers <- mlb2011[league == 'NL' & gamesStarted >= 10,]
ALPitchers <- mlb2011[league == 'AL' & gamesStarted >= 10,]
plot(NLPitchers$SOA, NLPitchers$W,
col='red',
main='Number of Strikeouts vs. Wins \nin the MLB National and American Leagues')
points(ALPitchers$SOA, ALPitchers$W, col='blue')
abline(a = 1.966, b = 0.059, col='red')
abline(a = 0.945, b = 0.073, col='blue')
league <- mlb2011$LG
gamesStarted <- mlb2011$GS
NLPitchers <- mlb2011[league == 'NL' & gamesStarted >= 10,]
ALPitchers <- mlb2011[league == 'AL' & gamesStarted >= 10,]
plot(NLPitchers$SOA, NLPitchers$W,
col='red',
main='Number of Strikeouts vs. Wins \nfor Pitchers in the MLB National and American Leagues')
points(ALPitchers$SOA, ALPitchers$W, col='blue')
abline(a = 1.966, b = 0.059, col='red')
abline(a = 0.945, b = 0.073, col='blue')
plot(NLPitchers$SOA, NLPitchers$W,
col = 'red',
main = 'Number of Strikeouts vs. Wins \nfor Pitchers in the MLB National and American Leagues in 2011',
xlab = 'Number of Strikeouts',
ylab = 'Number of Wins')
for (i in 1:5) {
y[i] <- x[i] + 2
print(y[i])      # I'm printing just to demonstrate the process
}
# Example 2 - add 2 to every value in a vector (long way)
x <- c(89, 92, 100, 75, 82)
y <- vector()      # creates an empty vector w/ unspecified length
for (i in 1:5) {
y[i] <- x[i] + 2
print(y[i])      # I'm printing just to demonstrate the process
}
u
u
# Example 2 - add 2 to every value in a vector (long way)
x <- c(89, 92, 100, 75, 82)
y <- vector()      # creates an empty vector w/ unspecified length
for (i in 1:5) {
y[i] <- x[i] + 2
y[i]      # I'm printing just to demonstrate the process
}
y
# Example 2 - add 2 to every value in a vector (long way)
x <- c(89, 92, 100, 75, 82)
y <- vector()      # creates an empty vector w/ unspecified length
for (i in 1:5) {
y[i] <- x[i] + 2
y     # I'm printing just to demonstrate the process
}
y
knitr::opts_chunk$set(echo = TRUE)
arr <- c(5, repeat(0, times = 19))
arr <- c(5, rep(0, times = 19))
for (i in 1:19)
arr[i+1] <- (arr[i] * 1.5) - 1
print(arr)
probabilities <- c(0.25, 0.83, 0.76, 0.25, 0.33, 0.51, 0.67, 0.50, 0.54, 0.75, 0.71, 0.03, 0.38, 0.64, 0.19)
likelyhoods <- vector()
for (i in probabilities)
if (probabilities[i] >= 0.5) {
likelyhoods[i] <- 1
} else {
likelyhoods[i] <- 0
}
# you need to set a seed when generating random numbers if you want your
#  results to be reproducible - by either you or other people
set.seed(1)  # doesn't need to be 1
# 8 decks of cards, each w/ 52 cards = 4 suits x 13 cards of each suit
decks <- 8
# 2-6 = +1, 7-9 = 0, and 10-K and Ace = -1
hi_lo_values <- c(rep(1, 5*4*decks), rep(0, 3*4*decks), rep(-1, 5*4*decks))
hi_lo_values   # note: 416 cards w/ 8 decks
# use sample() to randomly sample values from a vector --
# here we are "shuffling" the decks
hi_lo_random <- sample(hi_lo_values, replace = FALSE)
hi_lo_random
# use sample() to randomly sample values from a vector --
# here we are "shuffling" the decks
hi_lo_random <- sample(hi_lo_values, replace = FALSE)
hi_lo_random
# you need to set a seed when generating random numbers if you want your
#  results to be reproducible - by either you or other people
set.seed(1)  # doesn't need to be 1
# 8 decks of cards, each w/ 52 cards = 4 suits x 13 cards of each suit
decks <- 8
# 2-6 = +1, 7-9 = 0, and 10-K and Ace = -1
hi_lo_values <- c(rep(1, 5*4*decks), rep(0, 3*4*decks), rep(-1, 5*4*decks))
hi_lo_values   # note: 416 cards w/ 8 decks
# use sample() to randomly sample values from a vector --
# here we are "shuffling" the decks
hi_lo_random <- sample(hi_lo_values, replace = FALSE)
hi_lo_random
